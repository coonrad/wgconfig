#!/usr/bin/env bash

umask 077

privatekey=$(wg genkey)
publickey=$(echo "$privatekey" | wg pubkey)

fileconfig() {
    if [ -z "$filename" ]; then filename=wireguard; fi
    if [ -f "$filename.conf" ]; then
        echo "wgconfig: output file $filename.conf exists, exit."
        exit 1
    fi
}

echo
echo Enter values for any or all fields or none to generate keypair only
echo

echo -n "Filename (example client01) = "
read -r filename
fileconfig

echo -n "Address (example: 10.0.0.2/30) = "
read -r address

echo -n "ListenPort (return for dynamic endpoint) = "
read -r listenport

echo -n "DNS servers separated by comma (return for none) = "
read -r dns

echo -n "PresharedKey (return for none) = "
read -r prekey

echo -n "Remote peer PublicKey = "
read -r pubkey

echo -n "AllowedIPs separated by comma (0.0.0.0/0 for default) = "
read -r allowedips

echo -n "Endpoint hostname or IP address (return for none) = "
read -r endpoint

echo -n "Endpoint listenport (return for none) = "
read -r endport

{
    printf "# Name = %s\n\n" "$filename.conf"
    printf "# Configuration format is INI.\n"
    printf "# There are two top level sections: Interface and Peer\n"
    printf "[Interface]\n\n"
    printf "# Private key generated by wg genkey\n"
    printf "PrivateKey = %s\n\n" "$privatekey"
    printf "# Public key derived from private key with wg pubkey\n"
    printf "# Provide to remote peer\n"
    printf "# Publickey = %s\n\n" "$publickey"
    printf "# Comma separated list of addresses, CIDR notation optional\n"
    printf "# Multiple addresses allowed\n"
    printf "Address = %s\n\n" "$address"
    printf "# Optional 16-bit listen port\n"
    printf "# Don't set if this peer has a dynamic IP address\n"
    if [ -n "$listenport" ]; then
        printf "ListenPort = %s\n\n" "$listenport"
    else
        printf "# ListenPort =\n\n"
    fi
    printf "# Comma separated list of addresses for DNS service\n"
    printf "# Or hostnames to be set as search domains\n"
    if [ -n "$dns" ]; then
        printf "DNS = %s\n\n" "$dns"
    else
        printf "# DNS =\n\n"
    fi
    printf "# Manually specify MTU\n"
    printf "# MTU = 1420\n\n"
    printf "# Multiple peer configurations allowed\n"
    printf "[Peer]\n\n"
    printf "# Public key provided by remote peer\n"
    printf "PublicKey = %s\n\n" "$pubkey"
    printf "# Optional preshared key generated by wg genpsk\n"
    printf "# Adds addtional layer of cryptography for post-quantum resistance\n"
    if [ -n "$prekey" ]; then
        printf "PresharedKey = %s\n\n" "$prekey"
    else
        printf "# PresharedKey =\n\n"
    fi
    printf "# Comma separated list of IPv4 or IPv6 addresses with CIDR masks\n"
    printf "# For incoming traffic allowed and outgoing traffic directed\n"
    printf "# Use 0.0.0.0/0 and/or ::/0 for default route\n"
    printf "AllowedIPs = %s\n\n" "$allowedips"
    printf "# IP or hostname followed by colon and port number\n"
    printf "# Don't set if remote peers have dynamic addresses\n"
    if [ -n "$endpoint" ]; then
        printf "Endpoint = %s:%s\n\n" "$endpoint" "$endport"
    else
        printf "# Endpoint =\n\n"
    fi
    printf "# Keepalive interval between 1 and 65535\n"
    printf "# Useful for keeping NAT or stateful firewall connections active\n"
    printf "# PersistentKeepalive = 25\n\n"
} >>"$filename".conf

echo
echo "wgconfig: configuration saved as $filename.conf"
echo
